#!/usr/bin/env python3
#
# Copyright (C) 2021 Vladimir Berlev
#
# SPDX-License-Identifier: MIT

import argparse
import logging
import os
import shutil
import subprocess

TARGET_IMAGE = '127.0.0.1:5000/anide'
CONTAINER_NAME = 'anide'


class AnIde:
    def __init__(self, args):
        self.args = args
        self.docker = AnIde.get_docker()
        self.build_context = AnIde.get_build_context()
        self.group_id = os.getgid()
        self.user_id = os.getuid()

    @staticmethod
    def get_build_context():
        if not '__file__' in globals():
            raise RuntimeError('__file__ is not defined')

        path = os.path.join(
            os.path.dirname(os.path.realpath(__file__)), 
            'image'
        )
        if not os.path.exists(path):
            raise RuntimeError(f'{path} does not exist')

        # sanity check:
        # Dockerfile should be present in the build context
        dockerfile = os.path.join(path, 'Dockerfile')
        if not os.path.exists(dockerfile):
            raise RuntimeError(f'{dockerfile} does not exist')

        return path

    @staticmethod
    def get_docker():
        path = shutil.which('docker')
        if path is None:
            raise RuntimeError('docker is not found on the system')
        return path

    def main(self):
        logging.debug(self.args)
        if self.args.command == 'build':
            self.build()
        elif self.args.command == 'run':
            self.run()
        elif self.args.command == 'stop':
            self.stop()
        elif self.args.command == 'attach':
            self.attach()
        else:
            raise RuntimeError('no command provided')

    def build(self):
        self._run([
            self.docker, 'build', 
            '--build-arg', f'USER_ID={self.user_id}',
            '--build-arg', f'GROUP_ID={self.group_id}',
            '-t', TARGET_IMAGE,
            self.build_context
        ])

    def run(self):
        def _volume(host, guest):
            if host is None:
                return ()
            else:
                return ('--volume', f'{host}:{guest}')

        ws = Workspace(self.args.path)
        self._run([
            self.docker, 'run', 
            *_volume(ws.get_dev(), '/home/developer/dev'),
            *_volume(ws.get_gitconfig(), '/home/developer/.gitconfig'),
            *_volume(ws.get_ssh_auth_sock(), '/home/developer/.ssh-auth-sock'),
            '--name', CONTAINER_NAME, 
            '--detach', 
            '--pull', 'never', 
            '--rm', 
            TARGET_IMAGE
        ])

    def stop(self):
        self._run([self.docker, 'stop', CONTAINER_NAME])

    def attach(self):
        self._run([
            self.docker, 'exec', '-it', CONTAINER_NAME,
            '/usr/bin/tmux', 'new-session', '-A', '-s', 'main'
        ])

    def _run(self, command):
        workdir = self.build_context
        logging.info(f'workdir: {workdir}')
        logging.info(f'command: {command}')
        if not self.args.dry_run:
            subprocess.run(command, cwd=workdir)


class Workspace:
    def __init__(self, path):
        if path is None:
            raise RuntimeError('path is not provided')

        path = os.path.normpath(path)
        if not os.path.isabs(path):
            raise RuntimeError('not an absolute path')

        self._path = path
        self._dev = os.path.join(path, 'dev')
        self._magic = os.path.join(path, 'anide-magic')
        self._gitconfig = os.path.join(path, 'gitconfig')
        self._ssh_auth_sock = os.path.join(path, 'ssh-auth-sock')

        if not os.path.exists(self._path):
            os.mkdir(self._path)
            os.mkdir(self._dev)
            open(self._magic, 'x').close()

        if not os.path.exists(self._magic):
            raise RuntimeError('not an IDE path')

    def get_dev(self):
        return self._dev

    def get_gitconfig(self):
        r = self._gitconfig
        return r if os.path.exists(r) else None

    def get_ssh_auth_sock(self):
        r = self._ssh_auth_sock
        return r if os.path.exists(r) else None


def parse_args():
    p = argparse.ArgumentParser(
        description='An IDE',
        epilog='Copyright (C) 2021 Vladimir Berlev, MIT License'
    )
    p.add_argument('-v', '--verbose', action='store_true')
    p.add_argument('--dry-run', action='store_true')
    sp = p.add_subparsers(metavar='COMMAND', dest='command')
    sp.add_parser('build', help='build an IDE')
    sp_run = sp.add_parser('run', help='run an IDE')
    sp_run.add_argument('path', metavar='PATH', help='path to an IDE data')
    sp.add_parser('stop', help='stop an IDE')
    sp.add_parser('attach', help='attach to an IDE')
    return p.parse_args()


def setup_logging(args):
    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level, format='%(levelname)-6s: %(message)s')


if __name__ == '__main__':
    args = parse_args()
    setup_logging(args)
    try:
        AnIde(args).main()
    except Exception as e:
        logging.error(str(e))

